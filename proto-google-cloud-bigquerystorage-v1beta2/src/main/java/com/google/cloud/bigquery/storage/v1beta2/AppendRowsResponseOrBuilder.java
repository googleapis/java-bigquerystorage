/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/storage/v1beta2/storage.proto

package com.google.cloud.bigquery.storage.v1beta2;

public interface AppendRowsResponseOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.bigquery.storage.v1beta2.AppendRowsResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Result if the append is successful.
   * </pre>
   *
   * <code>.google.cloud.bigquery.storage.v1beta2.AppendRowsResponse.AppendResult append_result = 1;
   * </code>
   *
   * @return Whether the appendResult field is set.
   */
  boolean hasAppendResult();
  /**
   *
   *
   * <pre>
   * Result if the append is successful.
   * </pre>
   *
   * <code>.google.cloud.bigquery.storage.v1beta2.AppendRowsResponse.AppendResult append_result = 1;
   * </code>
   *
   * @return The appendResult.
   */
  com.google.cloud.bigquery.storage.v1beta2.AppendRowsResponse.AppendResult getAppendResult();
  /**
   *
   *
   * <pre>
   * Result if the append is successful.
   * </pre>
   *
   * <code>.google.cloud.bigquery.storage.v1beta2.AppendRowsResponse.AppendResult append_result = 1;
   * </code>
   */
  com.google.cloud.bigquery.storage.v1beta2.AppendRowsResponse.AppendResultOrBuilder
      getAppendResultOrBuilder();

  /**
   *
   *
   * <pre>
   * Error in case of request failed. If set, it means rows are not accepted
   * into the system. Users can retry or continue with other requests within
   * the same connection.
   * ALREADY_EXISTS: happens when offset is specified, it means the entire
   *   request is already appended, it is safe to ignore this error.
   * OUT_OF_RANGE: happens when offset is specified, it means the specified
   *   offset is beyond the end of the stream.
   * INVALID_ARGUMENT: error caused by malformed request or data.
   * RESOURCE_EXHAUSTED: request rejected due to throttling. Only happens when
   *   append without offset.
   * ABORTED: request processing is aborted because of prior failures, request
   *   can be retried if previous failure is fixed.
   * INTERNAL: server side errors that can be retried.
   * </pre>
   *
   * <code>.google.rpc.Status error = 2;</code>
   *
   * @return Whether the error field is set.
   */
  boolean hasError();
  /**
   *
   *
   * <pre>
   * Error in case of request failed. If set, it means rows are not accepted
   * into the system. Users can retry or continue with other requests within
   * the same connection.
   * ALREADY_EXISTS: happens when offset is specified, it means the entire
   *   request is already appended, it is safe to ignore this error.
   * OUT_OF_RANGE: happens when offset is specified, it means the specified
   *   offset is beyond the end of the stream.
   * INVALID_ARGUMENT: error caused by malformed request or data.
   * RESOURCE_EXHAUSTED: request rejected due to throttling. Only happens when
   *   append without offset.
   * ABORTED: request processing is aborted because of prior failures, request
   *   can be retried if previous failure is fixed.
   * INTERNAL: server side errors that can be retried.
   * </pre>
   *
   * <code>.google.rpc.Status error = 2;</code>
   *
   * @return The error.
   */
  com.google.rpc.Status getError();
  /**
   *
   *
   * <pre>
   * Error in case of request failed. If set, it means rows are not accepted
   * into the system. Users can retry or continue with other requests within
   * the same connection.
   * ALREADY_EXISTS: happens when offset is specified, it means the entire
   *   request is already appended, it is safe to ignore this error.
   * OUT_OF_RANGE: happens when offset is specified, it means the specified
   *   offset is beyond the end of the stream.
   * INVALID_ARGUMENT: error caused by malformed request or data.
   * RESOURCE_EXHAUSTED: request rejected due to throttling. Only happens when
   *   append without offset.
   * ABORTED: request processing is aborted because of prior failures, request
   *   can be retried if previous failure is fixed.
   * INTERNAL: server side errors that can be retried.
   * </pre>
   *
   * <code>.google.rpc.Status error = 2;</code>
   */
  com.google.rpc.StatusOrBuilder getErrorOrBuilder();

  /**
   *
   *
   * <pre>
   * If backend detects a schema update, pass it to user so that user can
   * use it to input new type of message. It will be empty when there is no
   * schema updates.
   * </pre>
   *
   * <code>.google.cloud.bigquery.storage.v1beta2.TableSchema updated_schema = 3;</code>
   *
   * @return Whether the updatedSchema field is set.
   */
  boolean hasUpdatedSchema();
  /**
   *
   *
   * <pre>
   * If backend detects a schema update, pass it to user so that user can
   * use it to input new type of message. It will be empty when there is no
   * schema updates.
   * </pre>
   *
   * <code>.google.cloud.bigquery.storage.v1beta2.TableSchema updated_schema = 3;</code>
   *
   * @return The updatedSchema.
   */
  com.google.cloud.bigquery.storage.v1beta2.TableSchema getUpdatedSchema();
  /**
   *
   *
   * <pre>
   * If backend detects a schema update, pass it to user so that user can
   * use it to input new type of message. It will be empty when there is no
   * schema updates.
   * </pre>
   *
   * <code>.google.cloud.bigquery.storage.v1beta2.TableSchema updated_schema = 3;</code>
   */
  com.google.cloud.bigquery.storage.v1beta2.TableSchemaOrBuilder getUpdatedSchemaOrBuilder();

  public com.google.cloud.bigquery.storage.v1beta2.AppendRowsResponse.ResponseCase
      getResponseCase();
}
