// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/storage/v1/storage.proto

package com.google.cloud.bigquery.storage.v1;

public interface AppendRowsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.bigquery.storage.v1.AppendRowsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. The write_stream identifies the target of the append operation,
   * and only needs to be specified as part of the first request on the gRPC
   * connection. If provided for subsequent requests, it must match the value of
   * the first request.
   * For explicitly created write streams, the format is:
   * * `projects/{project}/datasets/{dataset}/tables/{table}/streams/{id}`
   * For the special default stream, the format is:
   * * `projects/{project}/datasets/{dataset}/tables/{table}/streams/_default`.
   * </pre>
   *
   * <code>string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The writeStream.
   */
  java.lang.String getWriteStream();
  /**
   * <pre>
   * Required. The write_stream identifies the target of the append operation,
   * and only needs to be specified as part of the first request on the gRPC
   * connection. If provided for subsequent requests, it must match the value of
   * the first request.
   * For explicitly created write streams, the format is:
   * * `projects/{project}/datasets/{dataset}/tables/{table}/streams/{id}`
   * For the special default stream, the format is:
   * * `projects/{project}/datasets/{dataset}/tables/{table}/streams/_default`.
   * </pre>
   *
   * <code>string write_stream = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The bytes for writeStream.
   */
  com.google.protobuf.ByteString
      getWriteStreamBytes();

  /**
   * <pre>
   * If present, the write is only performed if the next append offset is same
   * as the provided value. If not present, the write is performed at the
   * current end of stream. Specifying a value for this field is not allowed
   * when calling AppendRows for the '_default' stream.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value offset = 2;</code>
   * @return Whether the offset field is set.
   */
  boolean hasOffset();
  /**
   * <pre>
   * If present, the write is only performed if the next append offset is same
   * as the provided value. If not present, the write is performed at the
   * current end of stream. Specifying a value for this field is not allowed
   * when calling AppendRows for the '_default' stream.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value offset = 2;</code>
   * @return The offset.
   */
  com.google.protobuf.Int64Value getOffset();
  /**
   * <pre>
   * If present, the write is only performed if the next append offset is same
   * as the provided value. If not present, the write is performed at the
   * current end of stream. Specifying a value for this field is not allowed
   * when calling AppendRows for the '_default' stream.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value offset = 2;</code>
   */
  com.google.protobuf.Int64ValueOrBuilder getOffsetOrBuilder();

  /**
   * <pre>
   * Rows in proto format.
   * </pre>
   *
   * <code>.google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData proto_rows = 4;</code>
   * @return Whether the protoRows field is set.
   */
  boolean hasProtoRows();
  /**
   * <pre>
   * Rows in proto format.
   * </pre>
   *
   * <code>.google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData proto_rows = 4;</code>
   * @return The protoRows.
   */
  com.google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData getProtoRows();
  /**
   * <pre>
   * Rows in proto format.
   * </pre>
   *
   * <code>.google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoData proto_rows = 4;</code>
   */
  com.google.cloud.bigquery.storage.v1.AppendRowsRequest.ProtoDataOrBuilder getProtoRowsOrBuilder();

  /**
   * <pre>
   * Id set by client to annotate its identity. Only initial request setting is
   * respected.
   * </pre>
   *
   * <code>string trace_id = 6;</code>
   * @return The traceId.
   */
  java.lang.String getTraceId();
  /**
   * <pre>
   * Id set by client to annotate its identity. Only initial request setting is
   * respected.
   * </pre>
   *
   * <code>string trace_id = 6;</code>
   * @return The bytes for traceId.
   */
  com.google.protobuf.ByteString
      getTraceIdBytes();

  /**
   * <pre>
   * A map to indicate how to interpret missing value for some fields. Missing
   * values are fields present in user schema but missing in rows. The key is
   * the field name. The value is the interpretation of missing values for the
   * field.
   * For example, a map {'foo': NULL_VALUE, 'bar': DEFAULT_VALUE} means all
   * missing values in field foo are interpreted as NULL, all missing values in
   * field bar are interpreted as the default value of field bar in table
   * schema.
   * If a field is not in this map and has missing values, the missing values
   * in this field are interpreted as NULL.
   * This field only applies to the current request, it won't affect other
   * requests on the connection.
   * Currently, field name can only be top-level column name, can't be a struct
   * field path like 'foo.bar'.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation&gt; missing_value_interpretations = 7;</code>
   */
  int getMissingValueInterpretationsCount();
  /**
   * <pre>
   * A map to indicate how to interpret missing value for some fields. Missing
   * values are fields present in user schema but missing in rows. The key is
   * the field name. The value is the interpretation of missing values for the
   * field.
   * For example, a map {'foo': NULL_VALUE, 'bar': DEFAULT_VALUE} means all
   * missing values in field foo are interpreted as NULL, all missing values in
   * field bar are interpreted as the default value of field bar in table
   * schema.
   * If a field is not in this map and has missing values, the missing values
   * in this field are interpreted as NULL.
   * This field only applies to the current request, it won't affect other
   * requests on the connection.
   * Currently, field name can only be top-level column name, can't be a struct
   * field path like 'foo.bar'.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation&gt; missing_value_interpretations = 7;</code>
   */
  boolean containsMissingValueInterpretations(
      java.lang.String key);
  /**
   * Use {@link #getMissingValueInterpretationsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation>
  getMissingValueInterpretations();
  /**
   * <pre>
   * A map to indicate how to interpret missing value for some fields. Missing
   * values are fields present in user schema but missing in rows. The key is
   * the field name. The value is the interpretation of missing values for the
   * field.
   * For example, a map {'foo': NULL_VALUE, 'bar': DEFAULT_VALUE} means all
   * missing values in field foo are interpreted as NULL, all missing values in
   * field bar are interpreted as the default value of field bar in table
   * schema.
   * If a field is not in this map and has missing values, the missing values
   * in this field are interpreted as NULL.
   * This field only applies to the current request, it won't affect other
   * requests on the connection.
   * Currently, field name can only be top-level column name, can't be a struct
   * field path like 'foo.bar'.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation&gt; missing_value_interpretations = 7;</code>
   */
  java.util.Map<java.lang.String, com.google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation>
  getMissingValueInterpretationsMap();
  /**
   * <pre>
   * A map to indicate how to interpret missing value for some fields. Missing
   * values are fields present in user schema but missing in rows. The key is
   * the field name. The value is the interpretation of missing values for the
   * field.
   * For example, a map {'foo': NULL_VALUE, 'bar': DEFAULT_VALUE} means all
   * missing values in field foo are interpreted as NULL, all missing values in
   * field bar are interpreted as the default value of field bar in table
   * schema.
   * If a field is not in this map and has missing values, the missing values
   * in this field are interpreted as NULL.
   * This field only applies to the current request, it won't affect other
   * requests on the connection.
   * Currently, field name can only be top-level column name, can't be a struct
   * field path like 'foo.bar'.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation&gt; missing_value_interpretations = 7;</code>
   */
  /* nullable */
com.google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation getMissingValueInterpretationsOrDefault(
      java.lang.String key,
      /* nullable */
com.google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation         defaultValue);
  /**
   * <pre>
   * A map to indicate how to interpret missing value for some fields. Missing
   * values are fields present in user schema but missing in rows. The key is
   * the field name. The value is the interpretation of missing values for the
   * field.
   * For example, a map {'foo': NULL_VALUE, 'bar': DEFAULT_VALUE} means all
   * missing values in field foo are interpreted as NULL, all missing values in
   * field bar are interpreted as the default value of field bar in table
   * schema.
   * If a field is not in this map and has missing values, the missing values
   * in this field are interpreted as NULL.
   * This field only applies to the current request, it won't affect other
   * requests on the connection.
   * Currently, field name can only be top-level column name, can't be a struct
   * field path like 'foo.bar'.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation&gt; missing_value_interpretations = 7;</code>
   */
  com.google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation getMissingValueInterpretationsOrThrow(
      java.lang.String key);
  /**
   * Use {@link #getMissingValueInterpretationsValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Integer>
  getMissingValueInterpretationsValue();
  /**
   * <pre>
   * A map to indicate how to interpret missing value for some fields. Missing
   * values are fields present in user schema but missing in rows. The key is
   * the field name. The value is the interpretation of missing values for the
   * field.
   * For example, a map {'foo': NULL_VALUE, 'bar': DEFAULT_VALUE} means all
   * missing values in field foo are interpreted as NULL, all missing values in
   * field bar are interpreted as the default value of field bar in table
   * schema.
   * If a field is not in this map and has missing values, the missing values
   * in this field are interpreted as NULL.
   * This field only applies to the current request, it won't affect other
   * requests on the connection.
   * Currently, field name can only be top-level column name, can't be a struct
   * field path like 'foo.bar'.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation&gt; missing_value_interpretations = 7;</code>
   */
  java.util.Map<java.lang.String, java.lang.Integer>
  getMissingValueInterpretationsValueMap();
  /**
   * <pre>
   * A map to indicate how to interpret missing value for some fields. Missing
   * values are fields present in user schema but missing in rows. The key is
   * the field name. The value is the interpretation of missing values for the
   * field.
   * For example, a map {'foo': NULL_VALUE, 'bar': DEFAULT_VALUE} means all
   * missing values in field foo are interpreted as NULL, all missing values in
   * field bar are interpreted as the default value of field bar in table
   * schema.
   * If a field is not in this map and has missing values, the missing values
   * in this field are interpreted as NULL.
   * This field only applies to the current request, it won't affect other
   * requests on the connection.
   * Currently, field name can only be top-level column name, can't be a struct
   * field path like 'foo.bar'.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation&gt; missing_value_interpretations = 7;</code>
   */
  int getMissingValueInterpretationsValueOrDefault(
      java.lang.String key,
      int defaultValue);
  /**
   * <pre>
   * A map to indicate how to interpret missing value for some fields. Missing
   * values are fields present in user schema but missing in rows. The key is
   * the field name. The value is the interpretation of missing values for the
   * field.
   * For example, a map {'foo': NULL_VALUE, 'bar': DEFAULT_VALUE} means all
   * missing values in field foo are interpreted as NULL, all missing values in
   * field bar are interpreted as the default value of field bar in table
   * schema.
   * If a field is not in this map and has missing values, the missing values
   * in this field are interpreted as NULL.
   * This field only applies to the current request, it won't affect other
   * requests on the connection.
   * Currently, field name can only be top-level column name, can't be a struct
   * field path like 'foo.bar'.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.bigquery.storage.v1.AppendRowsRequest.MissingValueInterpretation&gt; missing_value_interpretations = 7;</code>
   */
  int getMissingValueInterpretationsValueOrThrow(
      java.lang.String key);

  public com.google.cloud.bigquery.storage.v1.AppendRowsRequest.RowsCase getRowsCase();
}
